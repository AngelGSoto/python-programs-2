'''
Read the table generated by JPLUS ADQL
'''
from __future__ import print_function
import numpy as np
from astropy.io import fits
import os
import glob
import json
import argparse
import matplotlib.pyplot as plt
import pandas as pd
#import StringIO
from astropy.table import Table

def criterio_error(aper):
    ef1 = tab['uJAVA_'+aper+'_err'] <= 0.2
    ef2 = tab['J0378_'+aper+'_err'] <= 0.2
    ef3 =  tab['J0395_'+aper+'_err'] <= 0.2
    ef4 =  tab['J0410_'+aper+'_err'] <= 0.2
    ef5 =  tab['J0430_'+aper+'_err'] <= 0.2
    ef6 =  tab['gSDSS_'+aper+'_err'] <= 0.2
    ef7 =  tab['J0515_'+aper+'_err'] <= 0.2
    ef8 =  tab['rSDSS_'+aper+'_err'] <= 0.2
    ef9 =  tab['J0660_'+aper+'_err'] <= 0.2
    ef10 =  tab['iSDSS_'+aper+'_err'] <= 0.2
    ef11 =  tab['J0861_'+aper+'_err'] <= 0.2
    ef12 =  tab['zSDSS_'+aper+'_err'] <= 0.2

    errors = ef1 & ef6 & ef8 & ef10 & ef12
    return errors
    
parser = argparse.ArgumentParser(
              description="""Write wave and flux of a spectrum""")

parser.add_argument("source", type=str,
                    default="table-6mil-obj-jplus",
                    help="Name of source, taken the prefix ")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
file_ = args.source + ".tab"

tab = Table.read(file_, format="ascii.tab")

# MASK
mask_flag1 = tab['rSDSS_MASK_FLAGS'] == 0.0
mask_flag2 = tab['gSDSS_MASK_FLAGS'] == 0.0
mask_flag3 = tab['iSDSS_MASK_FLAGS'] == 0.0 
mask_flag4 = tab['zSDSS_MASK_FLAGS'] == 0.0
mask_flag5 = tab['uJAVA_MASK_FLAGS'] == 0.0 
mask_flag6 = tab['J0378_MASK_FLAGS'] == 0.0
mask_flag7 = tab['J0395_MASK_FLAGS'] == 0.0
mask_flag8 = tab['J0410_MASK_FLAGS'] == 0.0
mask_flag9 = tab['J0430_MASK_FLAGS'] == 0.0
mask_flag10 = tab['J0515_MASK_FLAGS'] == 0.0
mask_flag11 = tab['J0660_MASK_FLAGS'] == 0.0
mask_flag12 = tab['J0861_MASK_FLAGS'] == 0.0

total_mask_flags = mask_flag1 & mask_flag2 & mask_flag3 & mask_flag4 & mask_flag5 & mask_flag6 & mask_flag7 & mask_flag8 & mask_flag9 & mask_flag10 & mask_flag11 & mask_flag12

#Mask errorrs
errors_mask = criterio_error("MAG_APER_6_0")

# Total mask
mask_total = total_mask_flags & errors_mask

if args.debug:
    print("Cleaning table:", file_)
    print("Nember of objects:", len(tab[mask_total]))

# Save new tables
asciifile_Aper = file_.replace(".tab", "-mask-broad.tab")
try:
    tab[mask_total].write(asciifile_Aper, format='ascii.tab', overwrite=True)
except TypeError:
    tab[mask_total].write(asciifile_Aper, format='ascii.tab')
